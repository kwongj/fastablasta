#!/usr/bin/env python
# Script by Jason Kwong
# Python BLASTN wrapper

# Usage
import argparse
from argparse import RawTextHelpFormatter

parser = argparse.ArgumentParser(
	formatter_class=RawTextHelpFormatter,
	description='Searches a FASTA file for a specified query sequence using BLASTN',
	usage='\n  %(prog)s --query QUERY [OPTIONS] FASTA1 FASTA2 FASTA3 ... FASTAN > results.txt')
parser.add_argument('fasta', metavar='FASTA', nargs='+', help='FASTA file to search (required)')
parser.add_argument('--query', metavar='QUERY', required=True, help='query sequence to search for in FASTA format eg. rpoB, KPC-2 (required)')
parser.add_argument('--id', metavar='%ID', default='99', help='percentage identity cutoff (default="99")')
parser.add_argument('--evalue', metavar='EVALUE', default='1e-99', help='evalue cutoff (default="1e-99")')
parser.add_argument('--wordsize', metavar='SIZE', default='32', help='length of initial match (default="32")')
parser.add_argument('--short', action='store_true', help='allow searching for short sequences')
parser.add_argument('--outfmt', metavar='FORMAT', default='6', help='specify output format (default="6")')
parser.add_argument('--cpus', metavar='CPUS', default='1', help='number of CPUS to use (default="1")')
parser.add_argument('--version', action='version', version=
	'=====================================\n'
	'%(prog)s v0.1\n'
	'Updated 11-Oct-2015 by Jason Kwong\n'
	'Dependencies: Python 2.x, BioPython, BLAST\n'
	'=====================================')
args = parser.parse_args()
if args.short:
	task = 'blastn-short'
	dust = 'no'
	args.wordsize = '7'
	args.evalue = '1e-2'
else:
	task = 'blastn'
	dust = 'yes'

# Modules and Functions
import sys
import os
import os.path
from Bio.Blast.Applications import NcbiblastnCommandline

# Program exit
def progexit(n):
	sys.exit(n)

# Check files in FASTA format
def facheck(f):
	if os.path.isfile(f) == False:
		print 'ERROR: Cannot find "%(f)s". Check file exists.' % globals()
		return 1
	s = open(f, 'r')
	if s.read(1) != '>':
		print 'ERROR: "%(f)s" does not appear to be in FASTA format.' % globals()
		return 1
	s.close()

# Print header
def header():
	print 'ID' + '\t' + 'QUERY' + '\t' + 'SEQUENCE' + '\t' + 'IDENT' +'\t' + 'LENGTH' + '\t' + 'MISMATCH' + '\t' + 'GAPS' + '\t' + 'qSTART' + '\t' + 'qEND' + '\t' + 'sSTART' + '\t' + 'sEND' + '\t' + 'EVALUE' + '\t' + 'BITSCORE'

# Check query
if facheck(args.query) == 1:
	progexit(1)

# Run blastn
if args.outfmt == '6':
	header()
for f in args.fasta:
	if facheck(f) == 1:
		continue
	fBLAST = NcbiblastnCommandline(task=task, query=args.query, subject=f, evalue=args.evalue, perc_identity=args.id, outfmt=args.outfmt, num_threads=args.cpus, word_size=args.wordsize, dust=dust)
	stdout, stderr = fBLAST()
	if stdout:
		if args.outfmt == '6':
			BLASTout = stdout.split('\n')
			for line in BLASTout:
				if line.strip():
					lineOUT = ''.join(line)
					print f + '\t' + lineOUT
		else:
			print stdout
progexit(0)
